Introduction to NumPy
You will learn about the two most important and popular Python libraries for handling data: NumPy and Pandas.
 you will learn about the basics of NumPy, which is the fundamental package for scientific computing in Python. NumPy consists of a robust data structure called multidimensional arrays. Pandas is another powerful Python library that provides a fast and easy-to-use data analysis platform.
 
 To enhance the learning outcome, you are expected to pause the videos and code along with the instructor. You will be provided with a structured and blank IPython notebook for coding. It is a must for you to answer certain in-segment questions, as they serve the purpose of practice, and the final notebook will have practice tasks for you to solve.
 
 You will understand the advantages of using NumPy. You will also learn how to:

Create NumPy arrays,
Convert lists and tuples to NumPy arrays,
Inspect the structure and content of arrays, and
Subset, slice, index and iterate through arrays.
Before we get into the technicalities of a NumPy array, explore its useful functions and understand how it is implemented in Python, it is crucial to understand why NumPy is an important library for working with data. 


NumPy, an acronym for the term ‘Numerical Python’, is a library in Python which is used extensively for efficient mathematical computing. This library allows users to store large amounts of data using less memory and perform extensive operations efficiently. It provides optimised and simpler functionalities to perform aforementioned operations using homogenous, one-dimensional and multidimensional arrays (You will learn more about this later.).

 

Now, before delving deep into the concept of NumPy arrays, it is important to note that Python lists can very well perform all the actions that NumPy arrays perform; it is simply the fact that NumPy arrays are faster and more convenient than lists when it comes to extensive computations, which make them extremely useful, especially when you are working with large amounts of data.

Basics of NumPy
NumPy, which stands for ‘Numerical Python’, is a library meant for scientific calculations. The basic data structure of NumPy is an array. A NumPy array is a collection of values stored together, similar to a list. 

Ability to operate on individual elements in the array without using loops or list comprehension
Speed of execution 
The demonstration in the video above did not cover the aspect of speed, so for now, you can assume that a NumPy array is faster than a list. Later in this session, you will be able to take a look at a detailed demonstration to compare the speed of NumPy arrays.

Creating NumPy Arrays
There are two ways to create NumPy arrays, which are mentioned below.

By converting the existing lists or tuples to arrays using np.array
By initialising fixed-length arrays using the NumPy functions
In this session, you will learn about both these methods. 


The key advantage of using NumPy arrays over lists is that arrays allow you to operate over the entire data, unlike lists. However, in terms of structure, NumPy arrays are extremely similar to lists. If you try to run the print() command over a NumPy array, then you will get the following output:


[element_1  element_2  element_3…]

 

The only difference between a NumPy array and a list is that the elements in the NumPy array are separated by a space instead of a comma. Hence, this is an aesthetic feature that differentiates a list and a NumPy array.


An important point to note here is that the array given above is a one-dimensional array. You will learn about multidimensional arrays in the subsequent segments.


Another feature of NumPy arrays is that they are homogeneous in nature. By homogenous, we mean that all the elements in a NumPy array have to be of the same data type, which could be an integer, float, string, etc. 

Creating an array
Is it possible to create an array from a tuple?
Yes, NumPy arrays can be created using a tuple. Any sequence that has an array-like structure can be passed to the np.array function.

To summarise, similar to lists, you can subset your data through conditions based on your requirements in NumPy arrays. To do this, you need to use logical operators such as ‘<’ and ‘>’. NumPy also has a few inbuilt functions such as max(), min() and mean(), which allow you to calculate statistically important data over the data directly. In the following video, Behzad will explore these functions and also summarise the learnings of this segment.

