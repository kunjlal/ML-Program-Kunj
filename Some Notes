git clone git://github.com/diveintomark/diveintopython3.git
https://jupyter-notebook-beginner-guide.readthedocs.io/en/latest/
https://docs.python.org/3/tutorial/datastructures.html#sets

########################################################
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The blue color outside the cell represents command mode.\n",
    "# And the green color indicates edit mode.\n",
    "# Press 'Esc' to get into command mode.\n",
    "# Press 'Enter' to go back into edit mode.\n",
    "# Press 'P' to view the list of all available commands."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter your name: Akshay\n",
      "Hello, Akshay\n"
     ]
    }
   ],
   "source": [
    "# This is a coding cell.\n",
    "# Let's write your first Python program here.\n",
    "\n",
    "Name = input(\"Enter your name: \")\n",
    "print(\"Hello,\", Name)\n",
    "\n",
    "# Press 'Shift + Enter' to execute the cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Writing comments in a code cell can sometimes creates confusion. Jupyter notebook works both as a notebook and a coding console. \n",
    "# To write explanatory texts, you can use a markdown cell which enables you to format your comments well to create a more\n",
    "# readable code.\n",
    "\n",
    "# Let's now learn about markdown cells, then.\n",
    "# Press 'M' in command mode to convert a code cell to a Markdown cell."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a Markdown Cell. Double click on a markdown cell or press 'Enter' to see how it's written. And again, press 'Shift + Enter' to execute the cell.\n",
    "\n",
    "Let's further learn about the various customizations in a markdown cell to create a more readable and understandable code."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# This is a title\n",
    "## This is a heading\n",
    "### This is a subheading\n",
    "#### This is as small as a heading can get\n",
    "##### The fifth hash makes it Italic. Wow!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Formatting in Markdown cells\n",
    "\n",
    "### Emphasis\n",
    "\n",
    "__\"This will appear bold.\"__\n",
    "\n",
    "**\"So will this.\"**\n",
    "\n",
    "_\"Just one dash makes it italic.\"_\n",
    "\n",
    "*\"And one star on either side as well.\"*\n",
    "\n",
    "***\"This one's both bold and italic.\"***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Monospace Fonts\n",
    "\n",
    "Use a back single quotation mark (\\`) to get monospace fonts.\n",
    "\n",
    "`This text will appear in monospace font.`\n",
    "`Python is a beautiful language.`\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Line Breaks\n",
    "\n",
    "Sometimes in the markdown cells, you don't get a line break where you want simply by pressing enter. In such cases use `<br>` to get a manual line break.\n",
    "\n",
    "I want a line break here.\n",
    "But I don't get it. :/\n",
    "<br>\n",
    "So I used a manual line break <br>\n",
    "There we go! :)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Indenting\n",
    "\n",
    "Use `>` to indent your text.\n",
    "\n",
    "This is the first line\n",
    "> This indents the second line.\n",
    ">> This further indents it.\n",
    ">>> And this goes on and on."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bullets and Numbering\n",
    "\n",
    "-  A dash followed by two spaces, i.e. `'-  '` creates a bullet.\n",
    "    -  Pressing a tab before doing the above creates a sub-bullet."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Start with a simple `1. ` (1 followed by a dot and a space) to get a numbered list.\n",
    "2. And keep doing it for further numbers.\n",
    "    1. Again, just a tab for the sub-bullet."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Coloring\n",
    " \n",
    "-  <font color = blue> This text will be blue. </font>\n",
    "-  <font color = yellow> I hate this color! </font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding an Image\n",
    "\n",
    "You can add an image from the web by using `<img src = \"image_path\">`\n",
    "\n",
    "Example:\n",
    "<img src = \"https://blog.upgrad.com/wp-content/uploads/2016/06/logo.png\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### LaTeX Equations\n",
    "\n",
    "Jupyter notebook also supports LaTeX equations. Use a `$` on either side to write a LaTeX equation.\n",
    "\n",
    "The below example is just a hypothetical equation to explain how you can write LaTeX equations in Jupyter notebook. \n",
    "<br>\n",
    "\n",
    "$(\\frac{a_1}{a_2} + \\frac{a_3}{a_4})^2 = a_5^3$\n",
    "\n",
    "Go through this [link](https://en.wikibooks.org/wiki/LaTeX/Mathematics) if you want to learn the LaTeX syntax. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic Commands\n",
    "\n",
    "That was all about markdown cells. Now let us take a look at the most useful commands that you require everyday while coding in the Jupyter notebook.\n",
    "\n",
    "#### Command Mode Shortcuts\n",
    "-  `Esc`: To go into command mode\n",
    "-  `Enter`: To go back to edit mode\n",
    "-  `M`: To convert a cell to a markdown cell\n",
    "-  `Y`: To convert a cell back to a code cell\n",
    "-  `A`: To insert new cell above\n",
    "-  `B`: To insert new cell below\n",
    "-  `D + D`: To delete cell\n",
    "-  `Z`: Undo last operation\n",
    "-  `F`: To find and replace on your code\n",
    "-  `Shift + Up/Down`: To select multiple cells\n",
    "-  `Space`: Scroll notebook downwards\n",
    "-  `Shift + Space`: Scroll notebook upwards\n",
    "\n",
    "#### Edit Mode Shortcuts\n",
    "-  `Shift + Enter`: To execute the code in the current cell and go to the next cell\n",
    "-  `Alt + Enter`: To execute the code in the current cell and insert new cell below\n",
    "-  `Shift + Tab`: To get a brief documentation of the object that you have just typed in the coding cell\n",
    "-  `Ctrl + Shift + -`: To split the cell at cursor\n",
    "-  `Shift + M`: To merge selected cells\n",
    "\n",
    "Apart from this, you can also use `H` to open the list of keyboard shortcuts and even add new shortcuts or customize the existing shorcuts according to your personal requirements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

#########################################################

Here's a brief of what you learned in the video above.

 

Headings

# for the titles
## for the main headings
### for the subheadings
#### for the smaller subheadings
##### for the italic subheadings
Emphasis

__string__ or **string** for bold text
_string_ or *string*  for italic text
Monospace fonts

A back single quotation mark ` on both sides to get monospace fonts
Line breaks

<br> wherever you want a line break, as the notebook sometimes doesn`t give you the required line break where you want it
Indenting

> to indent the text
>> for further indenting it, and so on
Bullets and numbering

A single dash, i.e. -  followed by two spaces to make bullet points
A number and a dot followed by a space, i.e. 1. to make numbered lists
Colouring

<font color = blue, yellow, red, pink, green, etc.> String </font> to give your font any colour that you want
LaTeX Equations

$ on both the sides of the text to write LaTeX equations
 

It is also crucial that you know about the various shortcuts while using the Jupyter Notebook. Go through the following video to learn about all these shortcuts that you can use.

 Command mode shortcuts

Esc: To go into command mode
Enter: To go back to edit mode
M: To convert a cell to a markdown cell
Y: To convert a cell back to a code cell
A: To insert a new cell above
B: To insert a new cell below
D + D: To delete cell
Z: Undo the last operation
F: To find and replace on your code
Shift + Up/Down: To select multiple cells
Space: Scroll notebook downwards
Shift + Space: Scroll notebook upwards
Edit mode shortcuts

Shift + Enter: To execute the code in the current cell and go to the next cell
Alt + Enter: To execute the code in the current cell and insert new cell below
Shift + Tab: To get a brief documentation of the object that you have just typed in the coding cell
Ctrl + Shift + -: To split the cell at the cursor
Shift + M: To merge selected cells

.........................................................
Lists
Data structures are a special way of storing and accessing data. Every programming language has some built-in data structures such as arrays, lists, dictionaries etc.

 

In this module, we will cover the most widely used Python data structures, starting with lists. The Jupyter notebook used in the video can be downloaded from below. Please download the notebook, and follow it along with the lecture.


List_remove_append
Description
Remove SPSS from input_list=['SAS', 'R', 'PYTHON', 'SPSS'] and add 'SPARK' in its place.
Execution Time Limit
..................................
input_list=['SAS', 'R', 'PYTHON', 'SPSS']
input_list.remove('SPSS')
input_list.append('SPARK')
print(input_list)
.....................................

Tuples
Tuples are data structures that are similar to lists in all aspects except in the way they are declared and how much they allow themselves to be modified. A tuple once created cannot be modified.

 

As you saw in the previous segment, lists can be changed, and sometimes when you're storing important information in a list and using it somewhere else in your code, you run the risk of accidentally modifying the list and losing data or corrupting it. Tuples help you solve this problem

........................................
Add the element ‘Python’ to a tuple input_tuple = ('Monty Python', 'British', 1969). Since tuples are immutable, one way to do this is to convert the tuple to a list, add the element, and convert it back to a tuple.

To learn how to convert a list to a tuple, search for it on Google / Stack Overflow etc.
.........................
import ast,sys
input_str = sys.stdin.read()
input_tuple = ast.literal_eval(input_str)
list1=list(input_tuple)
list1.append('Python')
print(tuple(list1))
# Write your code here

# Make sure to name the final tuple 'tuple_2'
#print(tuple_2)
...............................

Yes, A tuple can contain mutable objects.

t[3] = 5
✓ Correct
Feedback:
Tuples cannot be modified.
...........................
Dictionaries
The first thing that comes to mind when you hear about dictionaries is the Oxford dictionary, where you can look up meanings of words. So, you can imagine how dictionaries work. A dictionary is a collection of words along with their meanings or simpler explanations.

 

At a broader level, you could call a dictionary a mapping of words with their synonyms or meanings. Let's learn about Python dictionaries from the professor.

..................................
Description
From a Dictionary input_dict={'Name': 'Monty', 'Profession': 'Singer' }, get the value of a key ‘Label’ which is not a part of the dictionary, in such a way that Python doesn't hit an error. If the key does not exist in the dictionary, Python should return 'NA'.
..................................
import ast,sys
input_str = sys.stdin.read()
input_dict = ast.literal_eval(input_str)
if('Label' in input_dict.keys()):

    answer = input_dict['Label']

else:

    answer='NA'

print(answer)
...........................................


d = {}
✓ Correct
Feedback:
It will create an empty dictionary.

d = {'a':1, 'b':2}
✓ Correct
Feedback:
This a one of the method to create a dictionary.

d = dict(a=1, b=2)
✓ Correct

Sets
The last type of data structure we will look at is 'sets'. Sets are a good way to get the unique elements out of a collection or to find common elements in various collections. Using sets is quick and can help solve tasks requiring deduplication. Let's have Professor Raghavan explain this to us.

To conclude, in this session, you learnt about the most important Python data structures, and you now have an idea of how they can be used. The various types of data structures that you learnt about are —

Lists
Tuples
Dictionaries
Sets
Set() removes duplicates and return the unique values.



